import asyncio
import random
import csv
import os
from datetime import datetime
from playwright.async_api import async_playwright
from collections import deque

CHROME_PATH = r"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"
CHROME_USER_DATA = r"User Data"
PROFILE = "Default"
QUERY = "catsdogs"
MAX_VIEW_TABS = 10
SKIP_PERCENT = 12  # —à–∞–Ω—Å —Å–∫–∏–ø–∞

visited_links = set()
video_queue = deque()

is_searching = True
search_page = None


def save_video_info(profile, query, watched, url, likes, comments, filename="tiktok_results.csv"):
    file_exists = os.path.isfile(filename)
    with open(filename, mode="a", newline="", encoding="utf-8") as file:
        writer = csv.writer(file, delimiter=";")
        if not file_exists:
            writer.writerow(
                ["profile", "search string", "datetime", "view or skip", "url", "likes count", "comments count"])
        writer.writerow([
            profile,
            query,
            datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "view" if watched else "skip",
            url,
            likes,
            comments
        ])


def parse_time(text):
    parts = text.strip().split(":")
    parts = list(map(int, parts))
    if len(parts) == 2:
        return parts[0] * 60 + parts[1]
    elif len(parts) == 3:
        return parts[0] * 3600 + parts[1] * 60 + parts[2]
    return 0


async def update_tab_title_with_time(page):
    old_percent = 0
    try:
        while True:
            time_elem = page.locator("xpath=//div[contains(@class, 'DivSeekBarTimeContainer')]").first
            time_text = await time_elem.inner_text()  # –ø—Ä–∏–º–µ—Ä: "00:12 / 00:41"
            percent = None  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ "/" –Ω–µ—Ç –≤ —Å—Ç—Ä–æ–∫–µ

            if "/" in time_text:
                current_str, total_str = time_text.split("/")
                current = parse_time(current_str)
                total = parse_time(total_str)

                if total > 0:
                    percent = int((current / total) * 100)
                    title = f"({percent}%) ‚è± {time_text.strip()}"
                else:
                    title = f"(??%) ‚è± {time_text.strip()} "
                    await page.click("video")
            else:
                title = f"‚è± {time_text.strip()}"

            # –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ –≤–∏–¥–µ–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ
            if percent is not None and (percent >= 100 or percent < old_percent):
                break
            elif percent is not None and (percent == old_percent):
                await page.click("video")
            elif percent is not None:
                old_percent = percent

            await page.evaluate(f'document.title = `{title}`')
            await asyncio.sleep(2)

    except asyncio.CancelledError:
        pass
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}")


async def watch_video(context, url):
    page = None
    try:
        page = await context.new_page()
        await page.evaluate("window.moveTo(0,0); window.resizeTo(screen.width, screen.height);")
        await page.goto(url, timeout=60000)

        like_elem = page.locator("xpath=//strong[@data-e2e='like-count']").first
        likes = await like_elem.inner_text()

        comment_elem = page.locator("xpath=//strong[@data-e2e='comment-count']").first
        comments = await comment_elem.inner_text()

        # üé≤ –†–∞–Ω–¥–æ–º –Ω–∞ –ø—Ä–æ–ø—É—Å–∫
        SKIP = random.randint(1, 100) <= SKIP_PERCENT
        if SKIP:
            print(f"‚è≠ –í–∏–¥–µ–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ {url} | ‚ù§Ô∏è {likes} | üí¨ {comments}")
        else:
            print(f"‚ñ∂Ô∏è –°–º–æ—Ç—Ä–∏–º: {url}  | ‚ù§Ô∏è {likes} | üí¨ {comments}")
            # –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –ø—Ä–∏ 100% –ø—Ä–æ—Å–º–æ—Ç—Ä–µ
            time_task = asyncio.create_task(update_tab_title_with_time(page))
            # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≤–µ—Ä—à—ë–Ω)
            await time_task

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        save_video_info(PROFILE, QUERY, watched=not SKIP, url=url, likes=likes, comments=comments)

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ {url}: {e}")
    finally:
        if page:
            await page.close()


async def search_videos(context):
    global is_searching
    await asyncio.sleep(3)
    while True:

        added = 0

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤–∏–¥–µ–æ
        links = await search_page.locator(
            "xpath=//a[contains(@class, 'AVideoContainer') and contains(@href, '/video/')]"
        ).all()

        for link in links:
            href = await link.get_attribute("href")
            if href and not (href in video_queue or href in visited_links):
                video_queue.append(href)
                added += 1

        await update_search_title()
        print(
            f"üîÅ –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(links)} | –î–æ–±–∞–≤–ª–µ–Ω–æ: {added} | –í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {len(video_queue)}")

        no_more_results = await search_page.locator("xpath=//div[contains(@class,'DivNoMoreResultsContainer')]").count()
        if added == 0 and no_more_results > 0:
            print("üö´ –ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç. –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–∏—Å–∫.")
            is_searching = False
            break

        await scroll_page(scrolls=10, delay=1)


async def scroll_page(scrolls=5, delay=2):
    await search_page.bring_to_front()
    for i in range(scrolls):
        await search_page.mouse.wheel(0, 3000)  # –∏–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –≤–Ω–∏–∑
        await asyncio.sleep(delay)  # –∑–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ –ø—Ä–æ–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞


async def update_search_title():
    watched_total = len(visited_links)
    found_total = watched_total + len(video_queue)
    percent = int((watched_total / found_total) * 100) if found_total else 0
    try:
        await search_page.evaluate(
            f'document.title = "üîé {QUERY} ({percent}%) {watched_total}/{found_total}"'
        )
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")


async def consume_queue(context):
    global visited_links, video_queue
    tasks = set()

    while True:
        # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        tasks = {t for t in tasks if not t.done()}

        # –ó–∞–ø—É—Å–∫ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á, –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Å—Ç–æ
        while len(tasks) < MAX_VIEW_TABS and video_queue:
            url = video_queue.popleft()
            visited_links.add(url)
            task = asyncio.create_task(watch_video(context, url))
            tasks.add(task)
            await update_search_title()
            await asyncio.sleep(2)

        await update_search_title()

        # –£—Å–ª–æ–≤–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if not is_searching and not video_queue and not tasks:
            break
        # –µ—Å–ª–∏ is_searching –∑–∞–≤–µ—Ä—à—ë–Ω, –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –Ω–æ –µ—Å—Ç—å –∑–∞–¥–∞—á–∏
        if not is_searching and not video_queue and tasks:
            print("‚åõ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á...")
            await asyncio.gather(*tasks)
            break

        await asyncio.sleep(1)


async def main():
    global search_page
    print(f"‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å: {PROFILE} | –ü–æ–∏—Å–∫: {QUERY}")

    async with async_playwright() as p:
        try:
            context = await p.chromium.launch_persistent_context(
                f"{CHROME_USER_DATA}\\{PROFILE}",
                headless=False,
                args=[
                    "--disable-blink-features=AutomationControlled",
                    "--start-maximized",
                    "--no-first-run",
                    "--no-default-browser-check",
                    "--disable-session-crashed-bubble",
                ],
                executable_path=CHROME_PATH
            )

            await asyncio.sleep(1)
            for p in context.pages[1:]:
                await p.close()

            search_page = context.pages[0] if context.pages else await context.new_page()
            search_url = f"https://www.tiktok.com/search?q={QUERY}"
            await search_page.goto(search_url)

            print(f"‚úÖ TikTok –æ—Ç–∫—Ä—ã—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É: {QUERY}")

            await asyncio.gather(
                search_videos(context)
                , consume_queue(context)
            )

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")

        finally:
            try:
                await context.close()
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")

        print(f"‚úÖ TikTok –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É: {QUERY}")


if __name__ == "__main__":
    asyncio.run(main())
